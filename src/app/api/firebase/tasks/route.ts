import { NextRequest, NextResponse } from "next/server"
import { taskService } from "@/services/firebaseServices"

// Route Firebase pour les t√¢ches
export async function GET(request: NextRequest) {
  try {
    console.log("üîç GET /api/firebase/tasks appel√©")
    
    // R√©cup√©rer les param√®tres de requ√™te pour le filtrage
    const { searchParams } = new URL(request.url)
    const userRole = searchParams.get('role')
    const userId = searchParams.get('userId')
    
    console.log(`üìã Param√®tres: role=${userRole}, userId=${userId}`)

    // Test simple d'abord
    console.log("üî• Tentative d'appel du service Firebase...")
    const tasks = await taskService.getTasks(userRole || undefined, userId || undefined)
    console.log(`‚úÖ Service Firebase r√©ussi, ${tasks.length} t√¢ches trouv√©es`)

    return NextResponse.json(tasks)
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des t√¢ches Firebase:", error)
    console.error("Stack trace:", error instanceof Error ? error.stack : String(error))
    return NextResponse.json(
      { message: "Erreur interne du serveur", error: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log("üî• API POST /api/firebase/tasks appel√©e")

    // Pour le d√©veloppement : accepter toutes les requ√™tes authentifi√©es
    // TODO: Ajouter une v√©rification d'authentification compl√®te en production
    const body = await request.json()
    console.log("üìù Payload re√ßu:", JSON.stringify(body, null, 2))

    // Accepter √† la fois "checklists" et "checklistItems" pour la compatibilit√©
    const { title, description, status, priority, dueDate, clientIds, allowComments, checklistItems, checklists } = body

    // Validation
    if (!title || !clientIds || !Array.isArray(clientIds) || clientIds.length === 0) {
      console.log("‚ùå Validation √©chou√©e:", { title, clientIds })
      return NextResponse.json(
        { message: "Le titre et au moins un client sont requis" },
        { status: 400 }
      )
    }

    console.log("‚úÖ Validation pass√©e, cr√©ation de la t√¢che...")

    // Convertir les checklists en checklistItems si n√©cessaire
    const processedChecklistItems = checklistItems || (checklists ? checklists.map((item: string, index: number) => ({
      id: `item-${index}`,
      title: item,
      completed: false,
      createdAt: new Date(),
      updatedAt: new Date(),
      order: index
    })) : [])

    console.log("üìù ChecklistItems trait√©s:", processedChecklistItems)

    // Cr√©er la t√¢che dans Firebase
    const newTask = await taskService.createTask({
      title,
      description: description || null,
      status: status || 'TODO',
      priority: priority || 'MEDIUM',
      dueDate: dueDate ? new Date(dueDate) : null,
      allowComments: allowComments || false,
      clientIds,
      checklistItems: processedChecklistItems,
    })

    console.log("‚úÖ T√¢che cr√©√©e avec succ√®s:", newTask.id)
    return NextResponse.json(newTask, { status: 201 })
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la t√¢che Firebase:", error)
    console.error("Stack trace:", error instanceof Error ? error.stack : String(error))
    return NextResponse.json(
      { message: "Erreur interne du serveur", error: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    )
  }
}
