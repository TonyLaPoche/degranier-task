const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Charger les variables d'environnement de Vercel
require('dotenv').config({ path: '.env.development.local' });

console.log('üöÄ Migration de la base de donn√©es Vercel...');

// V√©rifier que DATABASE_URL est d√©fini
if (!process.env.DATABASE_URL) {
  console.error('‚ùå DATABASE_URL non trouv√© dans .env.development.local');
  process.exit(1);
}

console.log('üìä URL de base de donn√©es:', process.env.DATABASE_URL.substring(0, 50) + '...');

// Cr√©er un sch√©ma temporaire pour PostgreSQL
const tempSchemaPath = path.join(__dirname, '..', 'prisma', 'schema-temp.prisma');
const originalSchemaPath = path.join(__dirname, '..', 'prisma', 'schema.prisma');

const originalSchema = fs.readFileSync(originalSchemaPath, 'utf8');
const tempSchema = originalSchema.replace(
  'provider = "sqlite"',
  'provider = "postgresql"'
);

fs.writeFileSync(tempSchemaPath, tempSchema);
console.log('üìù Sch√©ma temporaire cr√©√© pour PostgreSQL');

// Appliquer la migration avec le sch√©ma temporaire
try {
  console.log('‚öôÔ∏è Application de la migration...');
  execSync(`DATABASE_URL="${process.env.DATABASE_URL}" npx prisma migrate deploy --schema=${tempSchemaPath}`, {
    stdio: 'inherit',
    cwd: path.join(__dirname, '..')
  });

  console.log('‚úÖ Migration appliqu√©e avec succ√®s!');
} catch (error) {
  console.error('‚ùå Erreur lors de la migration:', error.message);
} finally {
  // Nettoyer le fichier temporaire
  if (fs.existsSync(tempSchemaPath)) {
    fs.unlinkSync(tempSchemaPath);
    console.log('üßπ Fichier temporaire supprim√©');
  }
}

console.log('üéâ Migration termin√©e!');
